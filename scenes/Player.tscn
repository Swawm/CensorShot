[gd_scene load_steps=9 format=2]

[ext_resource path="res://sprites/main_char_no_hands.png" type="Texture" id=1]
[ext_resource path="res://audio/jump2.ogg" type="AudioStream" id=2]
[ext_resource path="res://sprites/background.png" type="Texture" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D 

onready var SMG_PROJECTILE_SCENE = preload(\"res://scenes/smg_projectile.tscn\")
onready var RIFLE_PROJECTILE_SCENE = preload(\"res://scenes/rifle_projectile.tscn\")

const FRICTION = 0.25
const GRAVITY = 1000
const AIR_RESISTANCE = 0.02
const JUMP_FORCE = 250

var ACCELERATION = 200
var MAX_SPEED = 50
var motion = Vector2.ZERO
var sprint = 100

var active_gun = null
var guns = {}

onready var body = $Body
onready var hands = $Body.get_child(0)
onready var animation = $Animation
onready var timer = get_node(\"Body/Hands/Timer\")


func _physics_process(delta):
	var x_input = Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\")
	if x_input !=0:
		if Input.is_action_pressed(\"ui_run\"):
			animation.play(\"Run_fast\")
			var ACCELERATION = 300
			var MAX_SPEED = 100
			motion.x += x_input * ACCELERATION * delta
			motion.x = clamp(motion.x, -MAX_SPEED, MAX_SPEED)
		else:
			animation.play(\"Run\")
			motion.x += x_input * ACCELERATION * delta
			motion.x = clamp(motion.x, -MAX_SPEED, MAX_SPEED)

		body.flip_h = x_input < 0
		hands.flip_h = x_input < 0
		if body.flip_h == true:
			$Body/Hands/Position2.set_position(Vector2(-12.212, 2.443))
			hands.offset = Vector2(-4, 3)
			hands.position = Vector2(3, -2)
		else:
			$Body/Hands/Position2D.set_position(Vector2(12.212, 2.443))
			hands.flip_v = false
			hands.offset = Vector2(4, 3)
			hands.position = Vector2(-3, -2)
			
	else: 
		animation.play(\"Idle\")
		 

	motion.y += GRAVITY * delta

	if is_on_floor():
		if x_input == 0 :
			motion.x = lerp(motion.x, 0, FRICTION)
		if Input.is_action_just_pressed(\"ui_jump\"):
			motion.y = -JUMP_FORCE
			get_node(\"jump\").play() 
	else: 
		animation.play(\"Jump\")
# warning-ignore:integer_division
		if Input.is_action_just_released(\"ui_jump\") and motion.y < -JUMP_FORCE/2:
# warning-ignore:integer_division
			motion.y = -JUMP_FORCE/2
			
		if x_input == 0:
			motion.x = lerp(motion.x, 0, AIR_RESISTANCE)
			
	if Input.is_action_pressed(\"ui_shoot\"):
		if timer.is_stopped():
			timer.start()

		
	motion = move_and_slide(motion, Vector2.UP)
	
	if body.flip_h == false:
		if Input.is_action_pressed(\"ui_gun_up\") and Input.is_action_pressed(\"ui_gun_right\"):
			hands.rotation_degrees = -45
		elif Input.is_action_pressed(\"ui_gun_down\") and Input.is_action_pressed(\"ui_gun_right\"):
			hands.rotation_degrees = 45
		elif Input.is_action_pressed(\"ui_gun_down\"):
			hands.rotation_degrees = 90
		elif Input.is_action_pressed(\"ui_gun_up\"):
			hands.rotation_degrees = -90
		else: 
			hands.rotation_degrees = 0
	elif body.flip_h == true:
		if Input.is_action_pressed(\"ui_gun_up\") and Input.is_action_pressed(\"ui_gun_left\"):
			hands.rotation_degrees = 45
		elif Input.is_action_pressed(\"ui_gun_down\") and Input.is_action_pressed(\"ui_gun_left\"):
			hands.rotation_degrees = -45
		elif Input.is_action_pressed(\"ui_gun_down\"):
			hands.rotation_degrees = -90
		elif Input.is_action_pressed(\"ui_gun_up\"):
			hands.rotation_degrees = 90
		else: 
			hands.rotation_degrees = 0
			
			


func create_projectile():
	var weapon = weapon_select()
	if weapon == \"smg\":
		var projectile = SMG_PROJECTILE_SCENE.instance()
		get_parent().add_child(projectile)
		projectile.position = get_node(\"Body/Hands/Position2D\").get_global_position()
		projectile.rotation_degrees = get_node(\"Body/Hands\").get_rotation_degrees()
		projectile.get_node(\"Sprite\").flip_h = false
		return projectile
	elif weapon == \"rifle\":
		var projectile = RIFLE_PROJECTILE_SCENE.instance()
		get_parent().add_child(projectile)
		projectile.position = get_node(\"Body/Hands/Position2D\").get_global_position()
		projectile.rotation_degrees = get_node(\"Body/Hands\").get_rotation_degrees()
		projectile.get_node(\"Sprite\").flip_h = false
		return projectile

func weapon_select():
	var weapon_selected
	if Input.is_action_just_pressed(\"smg\"):
		weapon_selected = 1
		timer.stop()
		var smg = load(\"res://sprites/hands/smg.png\")
		hands.set_texture(smg)
		timer.set_wait_time(0.1)
		
	elif Input.is_action_just_pressed(\"rifle\"):
		weapon_selected = 2
		timer.stop()
		var rifle = load(\"res://sprites/hands/rifle.png\")
		hands.set_texture(rifle)
		timer.set_wait_time(1)
	print (weapon_selected)
	return weapon_selected

func get_gun(path):
	active_gun = load(path).instance()
	guns[active_gun.gun_id] = active_gun
	Player.add_child(active_gun)
"

[sub_resource type="Animation" id=2]
resource_name = "Idle"
step = 0.125
tracks/0/type = "value"
tracks/0/path = NodePath("Body:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 8, 9, 10, 11, 8, 9, 10, 11 ]
}

[sub_resource type="Animation" id=3]
length = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("Body:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 2 ]
}

[sub_resource type="Animation" id=4]
loop = true
step = 0.125
tracks/0/type = "value"
tracks/0/path = NodePath("Body:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 1, 2, 3, 4, 5, 6, 7, 0 ]
}

[sub_resource type="Animation" id=5]
loop = true
step = 0.063
tracks/0/type = "value"
tracks/0/path = NodePath("Body:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.063, 0.126, 0.189, 0.252, 0.315, 0.378, 0.441, 0.504, 0.567, 0.63, 0.693, 0.756, 0.819, 0.882, 0.945 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0 ]
}

[node name="Player" type="KinematicBody2D"]
position = Vector2( 2, 2 )
script = SubResource( 1 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
polygon = PoolVector2Array( 4, 8, 4, 3, 8, 1, 8, 0, 6, -1, 6, -7, -2, -7, -2, -3, -4, -3, -4, -2, -5, -2, -5, -1, -7, 0, -7, 1, -4, 3, -4, 8 )

[node name="Body" type="Sprite" parent="."]
position = Vector2( -0.0460682, 0.184278 )
texture = ExtResource( 1 )
vframes = 2
hframes = 12
frame = 8

[node name="Animation" type="AnimationPlayer" parent="."]
anims/Idle = SubResource( 2 )
anims/Jump = SubResource( 3 )
anims/Run = SubResource( 4 )
anims/Run_fast = SubResource( 5 )

[node name="jump" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 2 )
volume_db = -20.0

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_mirroring = Vector2( 160, 0 )

[node name="Background" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
position = Vector2( 0, 8 )
texture = ExtResource( 4 )
centered = false
